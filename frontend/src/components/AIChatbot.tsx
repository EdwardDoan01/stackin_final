import { useState, useRef, useEffect } from 'react'
import { chatbotApi } from '../lib/api'

interface Message {
  id: string
  text: string
  sender: 'user' | 'bot'
  timestamp: Date
}

export default function AIChatbot() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Xin ch√†o! T√¥i l√† AI Assistant c·ªßa Stackin. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c d·ªãch v·ª•, h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng, ho·∫∑c tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ n·ªÅn t·∫£ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
      sender: 'bot',
      timestamp: new Date()
    }
  ])
  const [inputText, setInputText] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSendMessage = async () => {
    if (!inputText.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      sender: 'user',
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputText('')
    setIsTyping(true)

    try {
      // Try to use real API first, fallback to local response
      let botResponse: string
      try {
        const response = await chatbotApi.sendMessage(inputText)
        botResponse = response.data.response || generateBotResponse(inputText)
      } catch (apiError) {
        // Fallback to local AI response if API is not available
        console.log('API not available, using local response')
        botResponse = generateBotResponse(inputText)
      }
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: 'bot',
        timestamp: new Date()
      }

      setMessages(prev => [...prev, botMessage])
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: 'Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.',
        sender: 'bot',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsTyping(false)
    }
  }

  const generateBotResponse = (userInput: string): string => {
    const input = userInput.toLowerCase()
    
    // Greeting responses
    if (input.includes('xin ch√†o') || input.includes('hello') || input.includes('hi')) {
      return 'Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ Stackin v√† c√°c d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.'
    }
    
    // Service-related questions
    if (input.includes('d·ªãch v·ª•') || input.includes('service')) {
      return 'Stackin cung c·∫•p nhi·ªÅu d·ªãch v·ª• nh∆∞: L·∫Øp r√°p ƒë·ªì n·ªôi th·∫•t, Di chuy·ªÉn ƒë·ªì ƒë·∫°c, L·∫Øp ƒë·∫∑t ƒë·ªì v·∫≠t, S·ª≠a ch·ªØa nh√† c·ª≠a, D·ªçn d·∫πp nh√†, H·ªó tr·ª£ IT. B·∫°n quan t√¢m ƒë·∫øn d·ªãch v·ª• n√†o?'
    }
    
    // Pricing questions
    if (input.includes('gi√°') || input.includes('price') || input.includes('chi ph√≠')) {
      return 'Gi√° d·ªãch v·ª• c·ªßa ch√∫ng t√¥i r·∫•t c·∫°nh tranh v√† minh b·∫°ch. M·ªói d·ªãch v·ª• c√≥ m·ª©c gi√° kh√°c nhau t√πy theo ƒë·ªô ph·ª©c t·∫°p. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt gi√° tr√™n trang Task ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi Tasker.'
    }
    
    // How to use platform
    if (input.includes('c√°ch s·ª≠ d·ª•ng') || input.includes('h∆∞·ªõng d·∫´n') || input.includes('how to')) {
      return 'ƒê·ªÉ s·ª≠ d·ª•ng Stackin:\n1. ƒêƒÉng k√Ω t√†i kho·∫£n\n2. ƒêƒÉng task c·∫ßn l√†m\n3. Ch·ªçn Tasker ph√π h·ª£p\n4. Thanh to√°n qua escrow\n5. Tasker ho√†n th√†nh c√¥ng vi·ªác\n6. X√°c nh·∫≠n v√† ƒë√°nh gi√°'
    }
    
    // Tasker registration
    if (input.includes('tr·ªü th√†nh tasker') || input.includes('tasker')) {
      return 'ƒê·ªÉ tr·ªü th√†nh Tasker:\n1. ƒêƒÉng k√Ω t√†i kho·∫£n\n2. ƒêi·ªÅn th√¥ng tin c√° nh√¢n\n3. Upload gi·∫•y t·ªù t√πy th√¢n\n4. Ch·ªçn k·ªπ nƒÉng v√† d·ªãch v·ª•\n5. Ch·ªù x√©t duy·ªát\n6. B·∫Øt ƒë·∫ßu nh·∫≠n task!'
    }
    
    // Payment questions
    if (input.includes('thanh to√°n') || input.includes('payment') || input.includes('ti·ªÅn')) {
      return 'Stackin s·ª≠ d·ª•ng h·ªá th·ªëng escrow ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n thanh to√°n. Ti·ªÅn s·∫Ω ƒë∆∞·ª£c gi·ªØ trong v√≠ escrow cho ƒë·∫øn khi task ho√†n th√†nh v√† ƒë∆∞·ª£c x√°c nh·∫≠n.'
    }
    
    // Support questions
    if (input.includes('h·ªó tr·ª£') || input.includes('support') || input.includes('gi√∫p ƒë·ª°')) {
      return 'T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! B·∫°n c√≥ th·ªÉ:\n- ƒê·∫∑t c√¢u h·ªèi tr·ª±c ti·∫øp v·ªõi t√¥i\n- Li√™n h·ªá qua email\n- G·ªçi hotline\n- S·ª≠ d·ª•ng ch·ª©c nƒÉng b√°o c√°o tr√™n trang'
    }
    
    // Default response
    return 'C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m ƒë·∫øn: "' + userInput + '". ƒê·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n, b·∫°n c√≥ th·ªÉ:\n- H·ªèi c·ª• th·ªÉ v·ªÅ d·ªãch v·ª•\n- T√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng\n- H·ªèi v·ªÅ gi√° c·∫£\n- Li√™n h·ªá h·ªó tr·ª£'
  }

  const quickActions = [
    { text: 'D·ªãch v·ª• c·ªßa Stackin', icon: 'üîß' },
    { text: 'C√°ch s·ª≠ d·ª•ng', icon: 'üìñ' },
    { text: 'Gi√° c·∫£', icon: 'üí∞' },
    { text: 'Tr·ªü th√†nh Tasker', icon: 'üë∑' },
  ]

  const handleQuickAction = (actionText: string) => {
    setInputText(actionText)
    handleSendMessage()
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  return (
    <div style={{
      position: 'fixed',
      bottom: '24px',
      right: '24px',
      zIndex: 50,
      width: 'fit-content'
    }}>
      {/* Chat Window - Only show when open */}
      {isOpen && (
        <div style={{
          marginBottom: '16px',
          animation: 'slideInFromBottom 0.3s ease-out'
        }}>
          <div style={{
            backgroundColor: '#ffffff',
            borderRadius: '12px',
            boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
            border: '1px solid #e5e7eb',
            width: '320px',
            height: '400px',
            display: 'flex',
            flexDirection: 'column'
          }}>
            
            {/* Chat Header */}
            <div style={{
              backgroundColor: '#2563eb',
              color: '#ffffff',
              padding: '12px',
              borderTopLeftRadius: '12px',
              borderTopRightRadius: '12px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                <div style={{
                  width: '24px',
                  height: '24px',
                  backgroundColor: '#3b82f6',
                  borderRadius: '50%',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '12px',
                  fontWeight: 'bold'
                }}>
                  AI
                </div>
                <div>
                  <h3 style={{ fontSize: '14px', fontWeight: '600', margin: 0 }}>AI Assistant</h3>
                  <p style={{ fontSize: '12px', color: '#bfdbfe', margin: 0 }}>Stackin Support</p>
                </div>
              </div>
              <button
                onClick={() => setIsOpen(false)}
                style={{
                  color: '#ffffff',
                  background: 'none',
                  border: 'none',
                  padding: '4px',
                  borderRadius: '50%',
                  cursor: 'pointer',
                  fontSize: '16px',
                  transition: 'all 0.2s ease'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#1d4ed8'
                  e.currentTarget.style.color = '#dbeafe'
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = 'transparent'
                  e.currentTarget.style.color = '#ffffff'
                }}
              >
                ‚úï
              </button>
            </div>

            {/* Messages Area */}
            <div style={{
              flex: 1,
              overflowY: 'auto',
              padding: '12px',
              maxHeight: '280px'
            }}>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                {messages.map((message) => (
                  <div
                    key={message.id}
                    style={{
                      display: 'flex',
                      justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start'
                    }}
                  >
                    <div
                      style={{
                        maxWidth: '85%',
                        padding: '8px',
                        borderRadius: '8px',
                        fontSize: '12px',
                        backgroundColor: message.sender === 'user' ? '#2563eb' : '#f3f4f6',
                        color: message.sender === 'user' ? '#ffffff' : '#374151'
                      }}
                    >
                      <p style={{ 
                        whiteSpace: 'pre-wrap', 
                        margin: 0,
                        wordBreak: 'break-word'
                      }}>
                        {message.text}
                      </p>
                      <p style={{
                        fontSize: '10px',
                        marginTop: '4px',
                        margin: 0,
                        color: message.sender === 'user' ? '#bfdbfe' : '#6b7280'
                      }}>
                        {message.timestamp.toLocaleTimeString('vi-VN', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* Quick Actions - Show only when no messages or first message */}
              {messages.length <= 1 && (
                <div style={{ marginTop: '16px' }}>
                  <p style={{
                    fontSize: '12px',
                    color: '#6b7280',
                    textAlign: 'center',
                    margin: '0 0 8px 0'
                  }}>
                    Ho·∫∑c ch·ªçn m·ªôt ch·ªß ƒë·ªÅ:
                  </p>
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: '1fr 1fr',
                    gap: '4px'
                  }}>
                    {quickActions.map((action, index) => (
                      <button
                        key={index}
                        onClick={() => handleQuickAction(action.text)}
                        style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '4px',
                          padding: '8px',
                          fontSize: '12px',
                          backgroundColor: '#f9fafb',
                          border: 'none',
                          borderRadius: '8px',
                          cursor: 'pointer',
                          transition: 'background-color 0.2s ease'
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.backgroundColor = '#f3f4f6'
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.backgroundColor = '#f9fafb'
                        }}
                      >
                        <span style={{ fontSize: '14px' }}>{action.icon}</span>
                        <span style={{
                          overflow: 'hidden',
                          textOverflow: 'ellipsis',
                          whiteSpace: 'nowrap'
                        }}>
                          {action.text}
                        </span>
                      </button>
                    ))}
                  </div>
                </div>
              )}
              
              {isTyping && (
                <div style={{ display: 'flex', justifyContent: 'flex-start', marginTop: '8px' }}>
                  <div style={{
                    backgroundColor: '#f3f4f6',
                    color: '#374151',
                    padding: '8px',
                    borderRadius: '8px'
                  }}>
                    <div style={{ display: 'flex', gap: '4px' }}>
                      <div style={{
                        width: '6px',
                        height: '6px',
                        backgroundColor: '#9ca3af',
                        borderRadius: '50%',
                        animation: 'bounce 1s infinite'
                      }}></div>
                      <div style={{
                        width: '6px',
                        height: '6px',
                        backgroundColor: '#9ca3af',
                        borderRadius: '50%',
                        animation: 'bounce 1s infinite 0.1s'
                      }}></div>
                      <div style={{
                        width: '6px',
                        height: '6px',
                        backgroundColor: '#9ca3af',
                        borderRadius: '50%',
                        animation: 'bounce 1s infinite 0.2s'
                      }}></div>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <div style={{
              padding: '12px',
              borderTop: '1px solid #e5e7eb'
            }}>
              <div style={{ display: 'flex', gap: '8px' }}>
                <input
                  type="text"
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Nh·∫≠p tin nh·∫Øn..."
                  style={{
                    flex: 1,
                    padding: '6px 8px',
                    fontSize: '12px',
                    border: '1px solid #d1d5db',
                    borderRadius: '8px',
                    outline: 'none',
                    transition: 'border-color 0.2s ease'
                  }}
                  onFocus={(e) => {
                    e.target.style.borderColor = '#2563eb'
                  }}
                  onBlur={(e) => {
                    e.target.style.borderColor = '#d1d5db'
                  }}
                  disabled={isTyping}
                />
                <button
                  onClick={handleSendMessage}
                  disabled={!inputText.trim() || isTyping}
                  style={{
                    backgroundColor: inputText.trim() && !isTyping ? '#2563eb' : '#9ca3af',
                    color: '#ffffff',
                    padding: '6px 12px',
                    borderRadius: '8px',
                    border: 'none',
                    cursor: inputText.trim() && !isTyping ? 'pointer' : 'not-allowed',
                    fontSize: '12px',
                    fontWeight: '500',
                    transition: 'background-color 0.2s ease'
                  }}
                  onMouseEnter={(e) => {
                    if (inputText.trim() && !isTyping) {
                      e.currentTarget.style.backgroundColor = '#1d4ed8'
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (inputText.trim() && !isTyping) {
                      e.currentTarget.style.backgroundColor = '#2563eb'
                    }
                  }}
                >
                  G·ª≠i
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Floating Chat Button - Always visible */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        style={{
          backgroundColor: '#2563eb',
          color: '#ffffff',
          borderRadius: '50%',
          boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
          transition: 'all 0.3s ease',
          width: '48px',
          height: '48px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '18px',
          border: 'none',
          cursor: 'pointer'
        }}
        onMouseEnter={(e) => {
          e.currentTarget.style.backgroundColor = '#1d4ed8'
          e.currentTarget.style.transform = 'scale(1.1)'
        }}
        onMouseLeave={(e) => {
          e.currentTarget.style.backgroundColor = '#2563eb'
          e.currentTarget.style.transform = 'scale(1)'
        }}
        title={isOpen ? "ƒê√≥ng AI Assistant" : "M·ªü AI Assistant"}
      >
        üí¨
      </button>
    </div>
  )
}